[
["index.html", "070172-1 UE Methodological course - Introduction to DH: Tools &amp; Techniques (2020W) Memex Edition Preliminaries", " 070172-1 UE Methodological course - Introduction to DH: Tools &amp; Techniques (2020W) Memex Edition Maxim G. Romanov 2020-10-19 Preliminaries This is a collection of relevant materials for a DH course by the Department of History, the University of Vienna. Course: 070172-1 UE Methodological course - Introduction to DH: Tools &amp; Techniques (2020W) Memex Edition u:find Link: https://ufind.univie.ac.at/en/course.html?lv=070172&amp;semester=2020W Meeting time: Tu 09:00-10:30 Meeting place: Seminarraum Geschichte 3 Hauptgebäude, 2.Stock, Stiege 9; due to COVID, all meetings will be held online Instructor: Dr. Maxim Romanov, maxim.romanov@univie.ac.at Language of instruction: English Office hours: Tu 14:00-15:00 (on Zoom; please, contact beforehand!) Office: Department of History, Maria-Theresien-Straße 9, 1090 Wien, Room 1.10 Back in 1945, Vannevar Bush, a Director of the US Office of Scientific Research and Development, proposed a device, which he called memex: Consider a future device … in which an individual stores all his books, records, and communications, and which is mechanized so that it may be consulted with exceeding speed and flexibility. It is an enlarged intimate supplement to his memory. … The owner of the memex, let us say, is interested in the origin and properties of the bow and arrow. Specifically he is studying why the short Turkish bow was apparently superior to the English long bow in the skirmishes of the Crusades. He has dozens of possibly pertinent books and articles in his memex. First he runs through an encyclopedia, finds an interesting but sketchy article, leaves it projected. Next, in a history, he finds another pertinent item, and ties the two together. Thus he goes, building a trail of many items. Occasionally he inserts a comment of his own, either linking it into the main trail or joining it by a side trail to a particular item. When it becomes evident that the elastic properties of available materials had a great deal to do with the bow, he branches off on a side trail which takes him through textbooks on elasticity and tables of physical constants. He inserts a page of longhand analysis of his own. Thus he builds a trail of his interest through the maze of materials available to him. And his trails do not fade. Several years later, his talk with a friend turns to the queer ways in which a people resist innovations, even of vital interest. He has an example, in the fact that the outraged Europeans still failed to adopt the Turkish bow. In fact he has a trail on it. A touch brings up the code book. Tapping a few keys projects the head of the trail. A lever runs through it at will, stopping at interesting items, going off on side excursions. It is an interesting trail, pertinent to the discussion. … — The Atlantic, July 1945. "],
["memex-and-zettelkasten.html", "Memex and Zettelkasten On Memex On Zettelkasten", " Memex and Zettelkasten The memex machine is often thought of as a precursor of the Internet, where information is interconnected. Vannevar Bush, however, seems to have viewed more as a personal machine knowledge organization system, to use a modern term. A system that would facilitate coordination of relevant pieces of information into organized sequences that he himself called “trails”. The idea of a personal knowledge device is still of great relevance and of great importance to scholars and scientists whose job is to construct such trails on a daily basis. Needless to say that historians will particulary benefit from having such a machine at their disposal (as Bush’s example about the Turkish bow and the English longbow indicates, see (Bush 1945)). While it is not necessary to adhere slavishly to Bush’s vision, we can definitely use his vision as a springboad to develop something similar; something that will allow us to navigate the massive volumes of information, which grew significantly since the 1940s. In the following two sections you will find some relevant materials on memex and the history of this idea. Here, however, I want to take some time to think about how the design of our own memex should look like. What do we want from it? What can we reasonably achieve? Before I procede to that, I would like to dwell on another relevant and, in my opinion, closely connected idea — that of Zettelkasten. On its own, there is nothing particularly interestin and exciting about it, as the word refers to a rather unexciting piece of furniture: a “slip-box”, or a “card-box”. However, this term became closely associated with Niklas Luhmann, a German professor of sociology (U Bielefeld), who is considered one of the most prolific scholars of the 20th century. Like others, Luhmann himself attributed his productivity to his working method and the knowledge organization system which he implemented and systematically used throughout his career (See, Luhmann 1982; Luhmann and Baecker 1987). NB: Detailed bibliography can be found at the end of the section and in the References section (see, TOC). On Memex (Bush 1945) is the first article—“As We May Think”—that Vannevar Bush published on memex in The Atlantic. This animation imagines the way memex would have functioned (produced by the organizers of the Brown/MIT symposium). (Nyce and Kahn 1991) is the book that came out of the symposium held at the The Brown/MIT Vannevar Bush Symposium in 1995, celebrating the 50th anniversary of Bush’s groundbreaking article “As We May Think”. The book includes several Bush’s articles on memex that show the evolution of his thinking about this device. This book is difficult to find; someone made an EPUB version of it (also shared via Slack). Recordings of the symposium are available on YouTube:; other videos of this symposium can also be found at the Video Archive of The MIT/Brown Vannevar Bush Symposium https://www.dougengelbart.org/content/view/258/000/. I highly recommend you watch Paul Kahn: A Visual Tour of Vannevar Bush’s Work; other presentations are very interesting as well. (Park 2014) is an recent experiment (MA Thesis in Design), trying to create a version of memex. On Zettelkasten Niklas Luhmann on his Zettelkasten Niklas Luhmann was open about his working method, which he discussed in his interviews (Luhmann and Baecker 1987), and in some of his academic articles(Luhmann 1982). Others on Luhmann’s Zettelkasten https://niklas-luhmann-archiv.de/ … References "],
["work-plan.html", "Work Plan Memex-Building Cycle Research Cycle", " Work Plan A place for the detailed description of how we are going to construct our memex machine. Memex-Building Cycle Research Cycle Building Trails At first, all publication are converted into chain of minimal information units (MIU); ideally, these units should be paragraphs, in practice—pages). MIUs are sequentially connected with each other and can be read in their natural order. The graph below gives a visual representation of such organization: a, b, c, …, and h are publications, where numbers indicate MIU sequences. When we have such a structure, we can apply different analytical methods and connect MIUs that exhibit some measure of similarity. As a result, we may get a very different graph reresentation of connections. Some MIUs get connected into long chains; others—into clusters; yet others float completely disconnected. These are the new connections that we would want to explore in order to find new connections in the information that we study. These are Vannevar Bush’s trails. As we work our way through these trails, we discover that some are not particularly interesting, others are dead ends, but some are illuminating. We want to annotate and preserve them for later. Red lines indicate those vetted trails. These are Niklas Luhmann’s Folgezettel. "],
["lesson-01.html", "1 Lesson 01 1.1 Bibliography Managers 1.2 Zotero 1.3 Homework", " 1 Lesson 01 1.1 Bibliography Managers Bibliography managers make your life easier when it comes to collectin, organizing and maintaining bibliographical references and your library of electronic publications (most commonly as PDFs). Additionally, they are an indispensable writing tool as they take care of formatting (and reformatting) references and bibliographies in any writing project that you might undertake. There are plenty of different programs out there with their advantages and disadvantages (for example, Mendeley, RefWorks, Citavi, Endnote, Papers, Zotero, and quite a few more). We will use Zotero—it is being developed by scholars for scholars; it is free and open source; it does pretty much everything you might possibly need from a program of this kind. 1.2 Zotero 1.2.1 Getting Started Zotero can be installed from here: https://www.zotero.org/download/; the page will offer you a version suitable for your operating system, but you should also see the links to versions for specific systems (Mac OS, Windows, Linux). During installation Zotero should automatically integrate into your browser (like Chrome or Firefox) and into your word processor (MS Word, LibreOffice, GoogleDocs are supported). It is possible that you may have to do that manually. Zotero Connector for Chrome can be installed from the same page (https://www.zotero.org/download/) detailed explanations on how to use word processor plugins can be found here; you can use Zotero with MS Word, LibreOffice and Google Docs; in case you cannot get your plugin activated, check the Troubleshooting Section. 1.2.2 Main Functionality You need to be able to do the following tasks with your Zotero in order to take full advantage of its functionality. Online Tutorials: If you prefer video tutorials, you can check a series of tutorials prepared by the McGill Library (there are also plenty other tutorials on YouTube :); if you prefer to read, you can check a series of tutorials prepared by the UC Berkley Library. Adding bibliographical records (and PDFs) Using Zotero Connector: the easiest way to add a reference is from a browser with Zotero connector. This can be done practically from any library or journal database (e.g., Uni Wien Library, Worldcat.org, JSTOR); simply click the connector button while you are on a page with a publication that you want to add to your Zotero database. PDF may be automatically downloaded, if available; keep in mind that in places like JSTOR you need to agree to terms before this function will work; what you need to do is to download one PDF manually from a JSTOR page, where you will be asked to agree to terms of their services; Drag-and-dropping PDFs into Zotero; this however works only when Zotero can parse relevant bibliographical information from a PDF; This might be a good way to start if you already have lots of PDFs that you want to add to Zotero. Using Unique Identifiers: you can use ISBN or DOI numbers. Using Import: you can import bibliographical data from another application or from bibliographical files (formats, like RIS, which you can download from most libraries as well). Manually: you can manually add and fill in a record as well. Write-and-cite Detailed Instructions: MS Word, LibreOffice and Google Docs; you can also check the video tutorial. Add a citation Customize a citation (by adding prefixes, suffixes, page range for a specific reference, etc.). Change citation style. For example, change from Chicago Manual of Style to Universität Wien - Institut für Geschichte (Yes, there is this specific citation style for Zotero: https://www.zotero.org/styles?q=id%3Auniversitat-wien-institut-fur-geschichte); in order to do that you need to download the IfG style and install it into Zotero. You can find lots of different citation styles here: https://www.zotero.org/styles; to add a new style to Zotero: download the style you want. Open Zotero. Go to Preferences (under Zotero, Edit, or Tools — depending on your system). Click the “Cite” button. Click the “Styles” tab. Click the + button at the bottom right. Select the style file you saved in the first step. Generate and update bibliography in your paper. NB: If you use Zotero plugin for adding your citations, they remain connected to Zotero and can be automatically reformatted; you can also drag-and-drop any bibliographical record into any text editor—the reference will be formatted according to the currently selelected style, but it will not be connected to Zotero and cannot be reformatted automatically later. General Maintenance and Organization Zotero can [automatically] rename PDFs using metadata, although the default function is not very robust (see, Zotfile plugin below). You can create “collections” and drag-and-drop publications relevant to a specific topic or project you are working on. 1.2.3 Additional Functionality: Plug-Ins There is a variety of third-party plugins that you can add to Zotero for additional functionality. The list of plugins can be found at https://www.zotero.org/support/plugins. To install a plugin, you need to download its .xpi file to your computer. Then, in Zotero, click “Tools → Add-Ons”, then drag the .xpi for the plugin onto the Add-Ons window that opens. Two plugins will be of particular interest to us: Zotfile and BetterBibTeX. 1.2.4 Zotfile Zotfile (http://zotfile.com/) is a Zotero plugin to manage your attachments: automatically rename, move, and attach PDFs (or other files) to Zotero items, sync PDFs from your Zotero library to your (mobile) PDF reader (e.g. an iPad, Android tablet, etc.) and extract annotations from PDF files. This plugin is particularly helpful for organizing PDFs on your hard drive. By default, Zotero saves PDFs in a computationally safe, but humanely incomprehensible manner: each PDF, even if it is renamed from bibliographical metadata and is human readable, it is still placed into a folder whose name is a random sequence of characters. Zotfile allows you to organize PDFs in a more human-friendly manner. The first screenshot below shows Zotero default mode, while the second one shows Zotfile mode: essentially, Zotfile creates a folder for each author and PDFs of all publications by that author get placed in that folder. You can sync this folder with Dropbox or other cloud service and access it from your tablet or phone. Zotero default organization. Zotfile organization. 1.2.5 Better BibTeX for Zotero For a moment this will not be an immediately useful plug-in, but it is the most important one for our Memex project. This plugin exports bibliographical data into a bibTeX format, which is very easy to process with python scripts (it also generates citation keys which can be used for citation in markdown, which we will cover later). The two screenshots below show how the same record looks in Zotero preview and in the bibTeX format. A Record in Zotero. The Same Record in BibTeX Format. 1.3 Homework collect 30-50 bibliographic records into your Zotero (ideally with PDFs); the number may seem like a lot, but you will see that you can do that it will take only about 30 mins on JSTOR; those of you who are already using Zotero must already have more than 50 records in your databases. clearly, you should be collecting items that are relevant to your fields of study and your research; organize them into folders, if that is necessary; create Bibliography and email it to me (this is one-click operation; try to figure on your own how to do this; asking on Slack counts); make sure that you are comfortable with the main functionality of Zotero; that you have the discussed plugins installed; to get comfortable with the main functionality, you should practice each listed procedure at least a couple of times. in preparation for the next class, please, watch the following two short videos from Dr. Paul Vierthaler’s Hacking the Humanities series: Episode 1: Introduction to the Hacking the Humanities Tutorial Series and install Python via Anaconda; you can also install Python directly from https://www.python.org/, but Anaconda distribution might make your life easier, especially if you are on Windows. Episode 2: The Command Prompt. Submitting homework: Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 071172-L01-HW-YourLastName-YourMatriculationNumber, where YourLastName is your last name and YourMatriculationNumber is your matriculation number. "],
["lesson-02.html", "2 Lesson 02 2.1 Command Line 2.2 Homework", " 2 Lesson 02 2.1 Command Line The knowledge of “command line” opens a whole new world of opportunities, as the number of interface-less programs and applications is significantly larger; command line also offers a more robust and direct controls over a computer. The main goal is to learn the basics of this indispensable tool. We can use Terminal on Mac (installed), Powershell on MS Windows (should be installed), although other command line tools will work as well. Before we proceed, however, let’s discuss a few concepts: What a filesystem is How to run a program from the command line What it means to run a program How the computer knows what program to run How to refer to a file from the command line 2.1.1 The filesystem Every disk contains a filesystem and information about where disk data is stored and how it may be accessed by a user or application. A filesystem typically manages operations, such as storage management, file naming, directories/folders, metadata, access rules and privileges. Commonly used file systems include File Allocation Table 32 (FAT 32), New Technology File System (NTFS) and Hierarchical File System (HFS). All the files and programs on your computer are organized into folders; all these folders are in some other folders all the way down to your hard drive, which we call the root of your filesystem. Every hard drive, USB drive, DVD, and CD-ROM has its own filesystem. You normally look at the contents of your filesystem via the Finder (on Mac) or the Explorer (on Windows). Open a window there now. The Finder / Explorer window opens in some folder, which might be different depending on what computer operating system you’re using. But you’ll usually have a navigation bar to the left, that will let you go to different places. You see folders, also known as directories, and you might see files too. One thing that computer OSes like to hide from you is the fact that you have a home directory, where all your personal files and folders should live. This makes it easier for multiple users to use a single computer. You can find your home directory like this: On Mac, select Go &gt; Home in the menu. On Windows, click on Local Drive (C:), then click on Users, then click on your login name. You’ll see that your home directory has several folders in it already, that were created automatically for you when you first made a user account. Now how can you tell where you are, with respect to the root of your drive? On Mac, select View &gt; Show Path Bar in the menu. On Windows, look: The Finder / Explorer will also show you where in your computer’s filesystem you are. This is called the path—it shows you the path you have to take from the root of your filesystem to the folder you are in. Now if you are on Windows, click on that bar and you’ll see something surprising. This is your real path. The C:\\ is how Windows refers to the root of your filesystem. Also note that, even if your OS is not in English, the path may very well be! 2.1.2 Getting started with the command line Now that you have a hint of what is going on behind the scenes on your computer, let’s dive into the command line. Here is how you get there: On Mac, look for a program called Terminal.app On Windows, look for a program called Powershell By default, these shells open in your home directory. On Windows this is easy to see, but on Mac it is less clear—that is, until you know that this ~ thing is an alias for your home directory. 2.1.3 Components of the command line The command line consists of a prompt where you type your commands, the commands and arguments that you type, and the output that results from those commands. The prompt is the thing that looks like (where user is your username): MacBook-Pro:~ user$ or PS C:\\Users\\user&gt; You will never need to type the prompt. That means that, if you are noting down what we do in class for future reference, you should not copy this part! The prompt actually gives you a little bit of information. On Mac, it has the name of the computer, followed by a :, followed by the directory where you are, followed by your username, with $ at the end. On Windows, it has PS for PowerShell, followed by the name of the drive (C for most of you), followed by a :, followed by the full path to where you are, with &gt; at the end. When you type a command, nothing happens until you press the Return/Enter key. Some commands have output (more text that appears after you press Return/Enter) and others don’t. You cannot run another command until the prompt is given again. NOTE: From this point on, you will be running the commands that are run here! Let’s first make sure we are in our home directory by typing cd ~. For most of you this should change nothing, but now you know your first shell command. The cd stands for change directory, and what follows is the directory you want to go to. cd ~ Now let’s have a look around. The command to show what is in any particular directory is called ls, which stands for list. Try running it. ls If you are on Windows, what you get will look more like this: PS C:\\Users\\user&gt; ls You should then see something like: Verzeichnis: C:\\Users\\user Mode LastWriteTime Length Name ---- ------------- ------ ---- d---- 23.02.2016 21:18 .oracle_jre_usage d-r-- 23.02.2016 20:40 Contacts d-r-- 23.02.2016 20:40 Desktop d-r-- 23.02.2016 21:11 Documents d-r-- 23.02.2016 21:16 Downloads d---- 23.02.2016 21:24 exist d-r-- 23.02.2016 20:40 Favorites d-r-- 23.02.2016 20:40 Links d-r-- 23.02.2016 20:40 Music d-r-- 23.02.2016 20:40 Pictures d-r-- 23.02.2016 20:40 Saved Games d-r-- 23.02.2016 20:40 Searches d-r-- 23.02.2016 20:40 Videos PS C:\\Users\\user&gt; Now go into your documents folder and look around. cd Documents ls How does this compare to what you see in the Finder / Explorer window, if you click on the Documents folder? Another important command, which tells you where you are at any given time, is pwd. This means print working directory. Try it now and see what you get. pwd If ever you get lost on the command line, pwd will always help you find your way. 2.1.4 File paths and path notations By now you will have noticed that I’ve mentioned the path a few times, and that it seems to have something to do with this thing that pwd prints out. (And, most annoyingly, that it looks different on Mac and Windows) The bit of text that you get from pwd is what is called path notation, and it is very important that you learn it if you want to do anything with your own digital data. Here are some rules: The / (or \\\\ on Windows) separates folder names. So Desktop/Video means “the thing called Video inside the Desktop folder”. The / all by itself refers to the base of your hard drive (usually Macintosh HD or C:\\.) The ~ refers to your home folder. These things can be combined; ~/Documents means “the Documents folder in my home folder.” The . means “the current working directory”, i.e. what you would get if you ran the command pwd. The .. means “one directory back”—if pwd gives you /Users/user, then .. means /Users. If the path does not start with a . or a / or a ~, then it will be assumed to start with a ./, that is, “start from the current working directory.” Let’s wander around a bit. But, first, let’s download a zip file with somoe materials for this class. Unzip it somewhere and go to that folder in your Terminal or Powershell. cd /path/to/the/folder/tnt_practice_materials pwd cd ./cd 02_CommandLine/ pwd ls Try the following if you are on Mac ls -lh cd .. pwd NB: you can use TAB to autocomplete the path: type ls to see what folders are in Documents, then go to any one of them by typing cd (space) and then the first two letters &gt; after that use TAB and the name will be complete automatically. cd 03[TAB] pwd cd ../01[TAB] pwd ls McCarty_Modeling.pdf cd .. 2.1.5 Command line arguments So far we have learned three commands: cd, ls, and pwd. These are useful for navigation, but we can run a lot more commands once we learn them, and have a need for them! What are we doing, exactly? First word is the command All other words are the arguments Words must be separated by spaces cd is a command that expects an argument: the name of the directory you want to go to. But what if the name has a space in it? NB: You may think of most commands as sentences with subject, predicate, and object (or multiple objects). cd ./01_Zotero_Word/Green Eggs and Ham What happened there? Well, we have a folder called Green Eggs and Ham in our example, and we tried to go there. But since the command line works with arguments, and since arguments are separated by space, the machine interpreted this as if we were saying “Change to the ./01_Zotero_Word/Green folder, and then Eggs, and, Ham, whatever that means.” And it gave us an error, because we don’t have a folder called Green in our example. You can get around this. How you get around it depends on whether you’re on Windows or not. One way to get around it that should work both places is like this: On Windows: cd &#39;./01_Zotero_Word/Green Eggs and Ham&#39; On Mac (you need to escape spaces by adding a backslash in front of them): cd ./01_Zotero_Word/Green\\ Eggs\\ and\\ Ham/ NB: The easiest solution is to use TAB for autocomplete! 2.1.6 More commands With command line you can do everything that you became accustomed to be doing in a graphical interface of your favorite file manager. For example, you can copy, move, and delete files and folders. You can use: mv to move files rm (on Windows also: del) to remove/delete files cp to copy files In all cases you need to state which files you want to mv, rm, or cp. In some cases you also need to point where you want to mv or cp your files. NB: Syntax on Mac and Windows will vary slightly, but if you keep using [TAB] for autocompletion, there will be no different in the process of typing the command, so let’s try to do it this way. To start, let’s go to the root directory of our course materials. From there, let’s do the following: cd 01[TAB] ls cp Mc[TAB] Green[TAB] cd Green[TAB] ls NB: when you hit [TAB] after Mc you are not going to get the full autocomplete, because there are two files that start with McCarty_Modeling—one is pdf and another—txt. You will need to type one more letter p and then hit [TAB] again to get the file name that you need. Thus, the command can be transcribed as: M[TAB]p[TAB] Now let’s rm (delete) the McCarty_Modeling.pdf from this folder, then go to the folder where we copied it, and then mv (move) it back to where it was in the first place. rm M[TAB]p[TAB] ls cd G[TAB] mv Mc[TAB] ../ cd .. ls Tada! The McCarty_Modeling.pdf should now be back where it was. If you want to learn about new commands, try to google. Googling things like this is a very big part of being a DH scholar! You will most likely find your answers on https://stackoverflow.com/, which will become your most frequented resource, if you embark on the DH path. 2.2 Homework Command line Watch again a short video on Command Prompt Dr. Vierthaler’s Hacking the Humanities series: Episode 2: The Command Prompt. Work through the following materials on command line which is relevant to your operating system. Ted Dawson, “Introduction to the Windows Command Line with PowerShell,” The Programming Historian 5 (2016), https://programminghistorian.org/en/lessons/intro-to-powershell. Ian Milligan and James Baker, “Introduction to the Bash Command Line,” The Programming Historian 3 (2014), https://programminghistorian.org/en/lessons/intro-to-bash. Python Work through Chapter I of Zelle’s book; read the entire chapter; retype and run all code snippets as described in the book; work through the chapter summary and exercises; complete all programming exercises; For submission: email me the results of “Programming Exercises”. In your submission there should be text files or python script files for exercises 1 (results of print function), 3, 4, 5, 7. Each python script should be working, i.e. you should be able to run it and get relevant results. You are welcome to discuss any of these assignments on Slack. Work through the following videos from Dr. Vierthaler’s Hacking the Humanities series: Episode 3: The Very Basics of Python Episode 4: Strings Episode 5: Integers, Floats, and Math in Python NB: The best way to work through these tutorials is to repeat all steps after the instructor. You can find the scripts at https://github.com/vierth/humanitiesTutorial. Submitting homework: Homework assignment must be submitted by the beginning of the next class; Email your homework to the instructor as attachments. In the subject of your email, please, add the following: 070112-LXX-HW-YourLastName-YourMatriculationNumber, where LXX is the lesson for which the homework is submitted, YourLastName is your last name, and YourMatriculationNumber is your matriculation number. "],
["lesson-03.html", "3 Lesson 03 3.1 Version Control and Collaboration 3.2 Setting-up git: 3.3 General git workflow: 3.4 Main git Commands 3.5 Some useful command line commands to remember: 3.6 Practice 3.7 Reference Materials 3.8 Homework", " 3 Lesson 03 3.1 Version Control and Collaboration Version control systems are extremely helpful for the development of DH projects, which are often lengthy and complex and require organic collaboration. Git and GitHub are currently the most popular tools of this kind. It is difficult to imagine a DH project that would not rely on the use of git and GitHub. Before we begin, make sure to: Create a github account at https://github.com/, if you do not have one yet. Download and install git software: for Windows: you can download it from https://git-scm.com/download/win. Please, choose 64-bit Git for Windows Setup. you can also install a portable version of git which does not require installation https://git-scm.com/download/win. For this, choose 64-bit Git for Windows Portable. Simply download and unzip (Suggestion: move that unzipped folder to the folder where you keep all class-related files and materials). In the folder, run git-bash.exe (for a more Unix-like command line) or git-cmd.exe (for Windows command line). for Mac: try to run git --version from Terminal. If git is not installed, you will be prompted to install Xcode Command Line Tools which comes with git among other things. This is the easiest way. Note: there are also interface tools for github. We will not be working with them in the class, but you are welcome to test them on your own at home. See, https://desktop.github.com. The main reason for this is because interface tools will be different for different operating systems, while the command line usage will be exactly the same across all platforms. In class we will cover the following: Basic git functionality; Starting a github-based website; Basics of markdown; 3.2 Setting-up git: git config --global user.name \"YourName\" git config --global user.email \"YourEmail\" 3.3 General git workflow: In Terminal (on Mac) or Git-Bash (on Windows) - you can also `fork` somebody else&#39;s repository (**NB:** this is done on &lt;https://github.com&gt;); forking means creating your own copy of some one&#39;s repository at that specific moment in time; clone (NB: this is done on https://github.com!) work add commit push / pull send pull request (NB: this is done on https://github.com) Note: Steps 1 and 7 are relevant only when you work on a project (repository) that is owned by somebody else. If you work on a repository that you created under your account, you only need steps 2-6. 3.4 Main git Commands git clone &lt;link&gt; clones/downloads a repository on you machine git status shows the current status of the repository (new, changed, deleted) git add . adds all new files and modified files to the repository git commit -m \"message\" saves all files in their current state into the repository, and created a milestone git push origin master uploads changes to https://github.com NB: sometimes you may get an error, which in most cases means that you need to pull first git pull origin master downloads changes from https://github.com git log shows the history of commits; here you can choose where you want to roll back, in case of troubles 3.5 Some useful command line commands to remember: pwd shows you where you are on a drive (gives you path) ls / dir [on Windows] shows everything in the your current location/folder cd &lt;name of the folder&gt; takes you to that folder cd .. takes you one level up in the tree structure of your computer 3.6 Practice Under your GitHub account, create repository HW070172; clone it to your computer (use command line: git clone LinkToYourRepository); Now, in the repository: let’s edit README.md (create it, if you have not yet); add some text into this file create subfolders for Lessons, like L01, L02, L03, etc. copy/paste your homework files in respective subfolders. Now, do the add-commit-push routine to upload the files to your repository Now, online: check if your files are there let’s do some edits to the README.md file (markdown basics / github flavor) pull / push 3.7 Reference Materials Daniel van Strien. 2016. “An Introduction to Version Control Using GitHub Desktop,” The Programming Historian 5, https://programminghistorian.org/. Visconti, Amanda. 2016. “Building a Static Website with Jekyll and GitHub Pages.” Programming Historian, April. https://programminghistorian.org/. Simpkin, Sarah. 2015. “Getting Started with Markdown.” Programming Historian, November. https://programminghistorian.org/. 3.8 Homework Git and GitHub Watch a video on Git &amp; GitHub in Dr. Vierthaler’s Hacking the Humanities series: Supplement 1: A quick Git and Github Tutorial. This will help you to go over the new material and pick up a few more useful git &amp; gitHub tricks. There is an interface for github that you can also use, but I strongly recommend to use command line; interfaces change, but commandline commands remain the same! Daniel van Strien. 2016. “An Introduction to Version Control Using GitHub Desktop,” The Programming Historian 5, https://programminghistorian.org/. Please, also read (for markdown): Simpkin, Sarah. 2015. “Getting Started with Markdown.” Programming Historian, November. https://programminghistorian.org/. More on github-flavored markdown: https://guides.github.com/features/mastering-markdown/. On markdown for academic writing, see https://pandoc.org/MANUAL.html. Extra: you can build and host a website on github.com; your website will have the name: YourUserName.github.io — you can create a ropository with that name and build your website there using Jekyll and GitHub Pages. Any other repository may also be converted into a part of your website, which will be accessible at YourUserName.github.io/YourRepository/ Visconti, Amanda. 2016. “Building a Static Website with Jekyll and GitHub Pages.” Programming Historian, April. https://programminghistorian.org/. Python Work through Chapter II of Zelle’s book; read the entire chapter; retype and run all code snippets as described in the book; work through the chapter summary and exercises; complete all programming exercises; For submission: email me the results of “Programming Exercises”. In your submission there should be text files or python script files for exercises 1 (results of print function), 3, 4, 5, 7. Each python script should be working, i.e. you should be able to run it and get relevant results. You are welcome to discuss any of these assignments on Slack. Work through the following videos from Dr. Vierthaler’s Hacking the Humanities series: Episode 3: The Very Basics of Python Episode 4: Strings Episode 5: Integers, Floats, and Math in Python NB: The best way to work through these tutorials is to repeat all steps after the instructor. You can find the scripts at https://github.com/vierth/humanitiesTutorial. Submitting homework: Homework assignment must be submitted by the beginning of the next class; Now, that you know how to use GitHub, you will be submitting your homework pushing it to github: Create a relevant subfoler in your HW070172 repository and place your HW files there; push them to your GitHub account; Email me the link to your repository with a short message (Something like: I have completed homework for Lesson 3, which is uploaded to my repository … in subfolder L03) In the subject of your email, please, add the following: CCXXXXX-LXX-HW-YourLastName-YourMatriculationNumber, where CCXXXXX is the numeric code of the course; LXX is the lesson for which the homework is being submitted; YourLastName is your last name, and YourMatriculationNumber is your matriculation number. "],
["syllabus.html", "Syllabus Course Details Aims, Contents and Method of the Course Course Evaluation Class Participation Homework Assignments Final Project Study materials Software, Tools, &amp; Technologies Schedule Lesson Topics", " Syllabus Course: 070172-1 UE Methodological course - Introduction to DH: Tools &amp; Techniques (2020W) Memex Edition Instructor: Dr. Maxim Romanov, maxim.romanov@univie.ac.at Language of instruction: English Office hours: Tu 14:00-15:00 (on Zoom; please, contact beforehand!) Office: Department of History, Maria-Theresien-Straße 9, 1090 Wien, Room 1.10 Course Details u:find Link: https://ufind.univie.ac.at/en/course.html?lv=070172&amp;semester=2020W Meeting time: Tu 09:00-10:30 Meeting place: Seminarraum Geschichte 3 Hauptgebäude, 2.Stock, Stiege 9; due to COVID, all meetings will be held online Aims, Contents and Method of the Course Back in 1945, Vannevar Bush, a Director of the US Office of Scientific Research and Development, proposed a device, which he called memex: Consider a future device … in which an individual stores all his books, records, and communications, and which is mechanized so that it may be consulted with exceeding speed and flexibility. It is an enlarged intimate supplement to his memory. … The owner of the memex, let us say, is interested in the origin and properties of the bow and arrow. Specifically he is studying why the short Turkish bow was apparently superior to the English long bow in the skirmishes of the Crusades. He has dozens of possibly pertinent books and articles in his memex. First he runs through an encyclopedia, finds an interesting but sketchy article, leaves it projected. Next, in a history, he finds another pertinent item, and ties the two together. Thus he goes, building a trail of many items. Occasionally he inserts a comment of his own, either linking it into the main trail or joining it by a side trail to a particular item. When it becomes evident that the elastic properties of available materials had a great deal to do with the bow, he branches off on a side trail which takes him through textbooks on elasticity and tables of physical constants. He inserts a page of longhand analysis of his own. Thus he builds a trail of his interest through the maze of materials available to him. And his trails do not fade. Several years later, his talk with a friend turns to the queer ways in which a people resist innovations, even of vital interest. He has an example, in the fact that the outraged Europeans still failed to adopt the Turkish bow. In fact he has a trail on it. A touch brings up the code book. Tapping a few keys projects the head of the trail. A lever runs through it at will, stopping at interesting items, going off on side excursions. It is an interesting trail, pertinent to the discussion. … — The Atlantic, July 1945; YouTube: https://www.youtube.com/watch?v=c539cK58ees. The memex machine is often thought of as a precursor of the Internet. Be it as it may, the idea of a personal knowledge device is still of great relevance and of great importance to scholars and scientists whose job is to construct such trails on a regular basis. Needless to say that historians will benefit greatly from having such a machine at their disposal. The course will introduce you to basic, intermediate, and some advanced computational techniques, which will allow you to build and maintain your own digital memex machine. No prior programming experience is expected (we will be learning Python). Each class session will consist in large part of practical hands-on exercises led by the instructor. Laptops are required for the course. We will accommodate whatever operating system you use (Windows, Mac, or Linux), but it must be a laptop rather than a tablet. Course Evaluation Course evaluation will be a combination of in-class participation (30%), weekly homework assignments (50%), and the final project (20%). Class Participation Attendance is required; regular participation is the key to completing the course; all students must come with their laptops; homework assignments must be submitted on time (some can be completed later as a part of the final project, but this must be discussed with the instructor whenever the issue arises); the final project must be submitted on time. Homework Assignments Homework assignments are to be submitted by the beginning of the next class; These must be emailed to the instructor as attachments; In the subject of your email, please, use the following format: CourseID-LessonID-HW-Lastname-matriculationNumber, for example, if I were to submit homework for the first lesson, my subject header would look like: 070112-L01-HW-Romanov-12435687. DH is a collaborative field, so you are most welcome to work on your homework assignments in groups, however: you must still submit it. That is, if a groups of three works on one assignment, there must be three separate submissions emailed from each member’s email. Final Project The final project is your own memex machine, which can help you with your studies and your research. Your final project must include all working scripts that will allow you in the future to continuously expand your memex machine by adding new readings into the mix. You are most welcome to work on this final project in groups, but everybody is required to produce their own working machine. Study materials MAIN TEXTBOOK Zelle, John M. Python Programming: An Introduction to Computer Science. Third edition. Portland, Oregon: Franklin, Beedle &amp; Associates Inc, 2017. (access via Moodle); (Zelle 2017) We will focus primarily on learning how to work with python, which is one of the most popular programming languages used in digital humanities. We will use several resources and the emphasis will be on you studying on your own: partially, this is because of time constraints, but more importantly, you will need to acquire a skill of learning on your own. No worries, I will provide necessary help whenever needed. This textbook will be our main resource. It is well written and will help you to wrap your heads around important computer science concepts; this reading is crucial and without it many interactive tutorials out there will not be particularly helpful. Each chapter has assignments and self-test multiple choice sections; Supplementary materials are available at the publisher’s website, where you can download example code and end-of-chapter solutions; additionaly, you can find videos with complimentary instructions Additional: Paul Vierthaler’s “Hacking the Humanities Tutorials” (Python+): https://www.youtube.com/playlist?list=PL6kqrM2i6BPIpEF5yHPNkYhjHm-FYWh17 https://www.codecademy.com/learn/learn-python :: you can use this free interactive Python course; it, however, uses Python 2.x, while the main textbook focuses on Python 3.x; the course is still a good supplementary practice. ADDITIONAL MATERIALS https://www.codecademy.com Codecademy has a series of free course that you are encouraged to use for specific skills and technologies: https://www.codecademy.com/learn/learn-how-to-code https://www.codecademy.com/learn/learn-python https://www.codecademy.com/learn/learn-html https://www.codecademy.com/learn/introduction-to-regular-expressions https://www.codecademy.com/learn/learn-css https://programminghistorian.org/lessons/ “Programming Historian” offers a number of tutorials for aspiring digital humanists. These will be assigned to you as reference materials. You also are encouraged to explore those tutorials that are not included into the course. Software, Tools, &amp; Technologies The following is the list of software, applications and packages that we will be using in the course. Make sure to have them installed by the class when we are supposed to use them. Zotero, https://www.zotero.org/ [Mac] Terminal / [Windows] Powershell (both are already on your machines) Python https://www.python.org/, install the latest 3.x version git and https://github.com/, version control system pandoc (https://pandoc.org/), markdown, bibTex (bibliographical format for LaTeX) Regular expressions; (Sublime Text, https://www.sublimetext.com/ is a text editor which supports regular expressions) Wget (https://www.gnu.org/software/wget/), a free software package for retrieving files Understanding formats: [TEI] XML, csv/tsv, json, yml, etc. Creating: HTML, css, tiny snippets of Javascript Schedule Location: Seminarraum Geschichte 3 Hauptgebäude, 2.Stock, Stiege 9; due to COVID, all meetings will be held online via video-conferencing Tuesday 06.10. 09:00 - 10:30 Tuesday 13.10. 09:00 - 10:30 Tuesday 20.10. 09:00 - 10:30 Tuesday 27.10. 09:00 - 10:30 Tuesday 03.11. 09:00 - 10:30 Tuesday 10.11. 09:00 - 10:30 Tuesday 17.11. 09:00 - 10:30 Tuesday 24.11. 09:00 - 10:30 Tuesday 01.12. 09:00 - 10:30 Tuesday 15.12. 09:00 - 10:30 Tuesday 12.01. 09:00 - 10:30 Tuesday 19.01. 09:00 - 10:30 Tuesday 26.01. 09:00 - 10:30 Lesson Topics === CORE TOOLS &amp; METHODS === [ #01 ] Introduction &amp; Roadmap; Managing Bibliography with Zotero [ #02 ] Getting to Know the Command Line; Getting Started with Python [ #03 ] Version Control and Collaboration [ #04 ] Sustainable [Academic] Writing [ #05 ] Constructing Robust Searches / Optional: Basics of Webscraping [ #06 ] Understanding Structured Data and Major Formats === BUILDING MEMEX === [ #07 ] Parsing and Manipulating Bibliographic Data [ #08 ] Processing PDFs: OCR [ #09 ] View and Display: Simple HTML-based Interface [ #10 ] Summarizing Textual Data: Keyword Extraction [ #11 ] Finding Connections: Similarity Measures [ #12 ] Processing Everything Together: Batch Processing and re-Processing [ #13 ] Improving the Overall Memex Design: What Else Can We Add? Note: one of the classes might be canceled; this will be announced separately. Lesson materials will be appearing on the website shortly before each class. Lessons will be accessible via the Lessons link on the left panel. References "],
["references.html", "References", " References "]
]
